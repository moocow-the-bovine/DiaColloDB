##========================================================================
## POD DOCUMENTATION, auto-generated by podextract.perl
=pod

=cut

##========================================================================
## NAME
=pod

=head1 NAME

DiaColloDB::Profile::Diff - diachronic collocation db, diff profiles

=cut

##========================================================================
## SYNOPSIS
=pod

=head1 SYNOPSIS

 ##========================================================================
 ## PRELIMINARIES
 
 use DiaColloDB::Profile::Diff;
 
 ##========================================================================
 ## Constructors etc.
 
 $prf   = $CLASS_OR_OBJECT->new(%args);
 $dprf2 = $dprf->clone();
 
 ##========================================================================
 ## Basic Access
 
 ($prf1,$prf2) = $dprf->operands();
 $bool = $dprf->empty();
 
 ##========================================================================
 ## I/O: JSON
 
 $obj = $CLASS_OR_OBJECT->loadJsonData( $data,%opts);
 
 ##========================================================================
 ## I/O: Text
 
 undef = $CLASS_OR_OBJECT->saveTextHeader($fh, hlabel=>$hlabel, titles=>\@titles);
 $bool = $prf->saveTextFh($fh, %opts);
 
 ##========================================================================
 ## I/O: HTML
 
 $bool = $prf->saveHtmlFile($filename_or_handle, %opts);
 
 ##========================================================================
 ## Compilation
 
 $dprf = $dprf->populate();
 $dprf = $dprf->compile($func,%opts);
 $dprf = $dprf->uncompile();
 
 ##========================================================================
 ## Trimming
 
 \@keys = $dprf->which(%opts);
 $dprf  = $dprf->trim(%opts);
 
 ##========================================================================
 ## Stringification
 
 $dprf = $dprf->stringify( $obj);
 
 ##========================================================================
 ## Binary operations
 
 $dprf = $dprf->_add($dprf2,%opts);
 

=cut

##========================================================================
## DESCRIPTION
=pod

=head1 DESCRIPTION

DiaColloDB::Profile::Diff is a
L<DiaColloDB::Profile|DiaColloDB::Profile> subclass
class for representing
low-level collocate frequency comparison data
for a single date-slice
as arising from the comparison of two
L<DiaColloDB::Profile|DiaColloDB::Profile> objects.

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: Globals & Constants
=pod

=head2 Globals & Constants

=over 4

=item Variable: @ISA

DiaColloDB::Profile::Diff inherits from
L<DiaColloDB::Profile|DiaColloDB::Profile>.

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: Constructors etc.
=pod

=head2 Constructors etc.

=over 4

=item new

 $prf = $CLASS_OR_OBJECT->new(%args);
 $prf = $CLASS_OR_OBJECT->new($prf1,$prf2,%args)

%args, object structure:

 ##-- DiaColloDB::Profile::Diff
 prf1 => $prf1,     ##-- 1st operand
 prf2 => $prf2,     ##-- 2nd operand
 ##-- DiaColloDB::Profile keys
 label => $label,   ##-- string label (used by Multi; undef for none(default))
 #N   => $N,         ##-- OVERRIDE:unused: total marginal relation frequency
 #f1  => $f1,        ##-- OVERRIDE:unused: total marginal frequency of target word(s)
 #f2  => \%f2,       ##-- OVERRIDE:unused: total marginal frequency of collocates: ($i2=>$f2, ...)
 #f12 => \%f12,      ##-- OVERRIDE:unused: collocation frequencies, %f12 = ($i2=>$f12, ...)
 ##
 eps => $eps,       ##-- smoothing constant (default=undef: no smoothing)
 score => $func,    ##-- selected scoring function ('f12', 'mi', or 'ld')
 mi => \%mi12,      ##-- DIFFERENCE: score: mutual information * logFreq a la Wortprofil; requires compile_mi()
 ld => \%ld12,      ##-- DIFFERENCE: score: log-dice a la Wortprofil; requires compile_ld()
 fm => \%fm12,      ##-- DIFFERENCE: score: frequency per million; requires compile_fm()

=item clone

 $dprf2 = $dprf->clone();
 $dprf2 = $dprf->clone($keep_compiled);

clones %$dprf;
if $keep_score is true, compiled data is cloned too.

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: Basic Access
=pod

=head2 Basic Access

=over 4

=item operands

 ($prf1,$prf2) = $dprf->operands();

get operand profiles.

=item empty

 $bool = $dprf->empty();

returns true iff both operands are empty

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: I/O: JSON
=pod

=head2 I/O: JSON

=over 4

=item loadJsonData

 $obj = $CLASS_OR_OBJECT->loadJsonData( $data,%opts);

guts for loadJsonString(), loadJsonFile()

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: I/O: Text
=pod

=head2 I/O: Text

See also L<DiaColloDB::Persistent|DiaColloDB::Persistent>.

=over 4

=item saveTextHeader

 undef = $CLASS_OR_OBJECT->saveTextHeader($fh, hlabel=>$hlabel, titles=>\@titles);

print column title header for text output.

=item saveTextFh

 $bool = $prf->saveTextFh($fh, %opts);

save flat TAB-separated text, format:

 Na Nb F1a F1b F2a F2b F12a F12b SCOREa SCOREb SCOREdiff LABEL ITEM2...

%opts:

 label => $label,   ##-- override $prf->{label} (used by Profile::Multi), no tab-separators required
 format => $fmt,    ##-- printf score formatting (default="%.4f")
 header => $bool,   ##-- include header-row? (default=1)
 hlabel => $hlabel, ##-- prefix header item-cells with $hlabel (used by Profile::MultiDiff)

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: I/O: HTML
=pod

=head2 I/O: HTML

=over 4

=item saveHtmlFile

 $bool = $prf->saveHtmlFile($filename_or_handle, %opts);

Save flat HTML table data with rows of the form

 SCOREa SCOREb DIFF PREFIX? ITEM2...

%opts:

 table  => $bool,     ##-- include <table>..</table> ? (default=1)
 body   => $bool,     ##-- include <html><body>..</html></body> ? (default=1)
 header => $bool,     ##-- include header-row? (default=1)
 hlabel => $hlabel,   ##-- prefix header item-cells with $hlabel (used by Profile::Multi), no '<th>..</th>' required
 label => $label,     ##-- prefix item-cells with $label (used by Profile::Multi), no '<td>..</td>' required
 format => $fmt,      ##-- printf score formatting (default="%.4f")

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: Compilation
=pod

=head2 Compilation

=over 4

=item populate

 $dprf = $dprf->populate();
 $dprf = $dprf->populate($prf1,$prf2);

populates diff-profile by subtracting $prf2 scores from $prf1.

=item compile

 $dprf = $dprf->compile($func,%opts);

compile for score-function $func, one of qw(f fm mi ld); default='f'.

=item uncompile

 $dprf = $dprf->uncompile();

un-compiles all scores for $dprf

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: Trimming
=pod

=head2 Trimming

=over 4

=item trim

 $dprf = $dprf->trim(%opts);

trims profile and operands; %opts:

 kbest => $kbest,    ##-- retain only $kbest items (by score value)
 kbesta => $kbesta,  ##-- retain only $kbest items (by score absolute value)
 cutoff => $cutoff,  ##-- retain only items with $prf->{$prf->{score}}{$item} >= $cutoff
 keep => $keep,      ##-- retain keys @$keep (ARRAY) or keys(%$keep) (HASH)
 drop => $drop,      ##-- drop keys @$drop (ARRAY) or keys(%$drop) (HASH)

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: Stringification
=pod

=head2 Stringification

=over 4

=item stringify

 $dprf = $dprf->stringify( $obj);
 $dprf = $dprf->stringify(\@key2str)
 $dprf = $dprf->stringify(\&key2str)
 $dprf = $dprf->stringify(\%key2str)

stringifies profile and operands (destructive) via $obj-E<gt>i2s($key2), $key2str-E<gt>($i2) or $key2str-E<gt>{$i2}.

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DiaColloDB::Profile::Diff: Binary operations
=pod

=head2 Binary operations

=over 4

=item _add

 $dprf = $dprf->_add($dprf2,%opts);

adds $dprf2 operatnd frequency data to $dprf operands (destructive);
implicitly un-compiles $dprf.
%opts:

 N  => $bool, ##-- whether to add N values (default:true)
 f1 => $bool, ##-- whether to add f1 values (default:true)

=back

=cut

##========================================================================
## END POD DOCUMENTATION, auto-generated by podextract.perl

##======================================================================
## Footer
##======================================================================
=pod

=head1 AUTHOR

Bryan Jurish E<lt>moocow@cpan.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2015 by Bryan Jurish

This package is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.2 or,
at your option, any later version of Perl 5 you may have available.

=head1 SEE ALSO

L<dcdb-create.per(1)|dcdb-create.perl>,
L<dcdb-query.perl(1)|dcdb-query.perl>,
L<dcdb-info.perl(1)|dcdb-info.perl>,
L<dcdb-export.perl(1)|dcdb-export.perl>,
L<dcdb-dump.perl(1)|dcdb-dump.perl>,
L<DiaColloDB(3pm)|DiaColloDB>,
L<perl(1)|perl>,
...



=cut
